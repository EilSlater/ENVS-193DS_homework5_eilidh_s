---
title: "Untitled"
format: 
  html:
    toc: true
    toc-location: left
    code-fold: true
    theme: yeti
editor: visual
execute: 
  message: false
  warning: false
---

```{r libraries}

install.packages("here")
install.packages("janitor")
install.packages("ggeffects")
install.packages("performance")
install.packages("naniar")
install.packages("flextable")
install.packages("car")
install.packages("broom")
install.packages("corrplot")
install.packages("AICcmodavg")
install.packages("GGally")
install.packages("MuMIn")

library(tidyverse)
library(here)
library(janitor)
library(ggeffects)
library(performance)
library(naniar) 
library(flextable)
library(car)
library(broom)
library(corrplot)
library(AICcmodavg)
library(GGally)
library(readr)
library(MuMIn)
```

Read in Data

```{r}

directory <- "/Desktop/College/Year 3 (22-23)/Spring Quarter/ENV S 193DS/ENVS-193DS_homework5/data/knb-lter-hrf.109.18"


plant <- read_csv(here("data", "knb-lter-hfr.109.18", "hf109-01-sarracenia.csv")) %>% 
  # make the column names cleaner
  clean_names() %>% 
  # selecting the columns of interest
  select(totmass, species, feedlevel, sla, chlorophyll, amass, num_lvs, num_phylls)
```

```{r}

```

MISSING STEPS

Visualize the missing data:

```{r missing-data-visualization}
gg_miss_var(plant)

```

Subsetting the data by dropping NAs:

```{r subset-drop-NA}
plant_subset <- plant %>%
  drop_na(sla, chlorophyll, amass, num_lvs, num_phylls) #FINISH

```

Create a correlation plot:

```{r correlation-plot}
#calculate Pearson's R for numerical values only
plant_cor <- plant_subset %>%
  select(feedlevel:num_phylls) %>%
  cor(method="pearson")

#creating a correlation plot
corrplot(plant_cor,
         # change the shape of what's in the cells
         method = "ellipse",
         addCoef.col = "black"
         )

```

Create a plot of each variable compared against the others

```{r pairs-plot}
plant_subset %>%
  select(species:num_phylls) %>%
  ggpairs()
```

Starting regression here:

(example) to determine how species and physiological characteristics predict biomass, we fit multiple linear models

```{r null-and-full-model}
null <- lm(totmass ~ 1, data = plant_subset)
full <- lm(totmass ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset)
```

We visually assess normality and homoskedasticity of residuals using diagnostic plots for the full model

```{r full-diagnostics}
par(mfrow = c(2, 2))
plot(full)

```

We also tested for normality using the Shapiro-Wilk test (null hypothesis: variable of interest (i.e. the residuals) are normally distributed).

We tested for heteroskedasticity using the Breusch-Pagan test (null hypothesis: variable of interest has constant variance).

```{r}
check_normality(full)
check_heteroscedasticity(full)
```

```{r}
null_log <- lm(log(totmass) ~ 1, data = plant_subset)
full_log <- lm(log(totmass) ~ species + feedlevel + sla + chlorophyll + amass + num_lvs + num_phylls, data = plant_subset)

plot(full_log)
check_normality(full_log)
check_heteroscedasticity(full_log)
```

Evaluate multicollinearity:

```{r}
car::vif(full_log)
```

```{r}
model2_log <- lm(log(totmass) ~ species, data = plant_subset)
plot(model2_log)
```

```{r}
check_normality(model2_log)
check_heteroscedasticity(model2_log)
```

```{r}
AICc(full_log)
```

```{r}
AICc(model2_log)
```

```{r}
AICc(null_log)
```

```{r}
MuMIn::AICc(full_log, model2_log, null_log)
```

```{r}
MuMIn::model.sel(full_log, model2_log, null_log)
```

Choose the lowest AIC Value

-   Which was full_log

```{r}
summary(full_log)
```

```{r}
table <- tidy(full_log, conf.int = TRUE, exponentiate = TRUE) %>% 
  # change the p-value numbers if they're really small
  # change the estmaes, standard error, and t-tstatistics to round to ___ digits
  # using mutate
  # make it into a flextable
  flextable() %>% 
  # fit it to the viewer
  autofit()

table
```

Using ggpredict() to backtrasform estimates

```{r}
model_pred <- ggpredict(full_log, terms = "species", back.transform = TRUE)

plot(ggpredict(full_log, terms = "species", back.transform = TRUE), add.data = TRUE)
```

```{r}
plot(ggpredict(full_log, terms = "chlorophyll", back.transform = TRUE), add.data = TRUE)
```

```{r}
plot(ggpredict(full_log, terms = "sla", back.transform = TRUE), add.data = TRUE)
```

```{r}
model_pred
```
